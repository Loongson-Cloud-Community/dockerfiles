# This file is generated by the template.

REGISTRY?=cr.loongnix.cn
ORGANIZATION?=portainer
REPOSITORY?=portainer-ce
TAG?=2.20.0
LATEST?=true

IMAGE=$(REGISTRY)/$(ORGANIZATION)/$(REPOSITORY):$(TAG)
LATEST_IMAGE=$(REGISTRY)/$(ORGANIZATION)/$(REPOSITORY):latest

DOCKER=$(shell which docker)
# SOURCE_URL is a url to download source, such as https://github.com/merore/merore.git.
# SOURCE is project sources, its located at src/$(SORUCE).
# PATCH is a patch that supports loong64 to $(SOURCE).
# Be sure to fill in the follows!!!
SOURCE_URL=https://github.com/portainer/portainer
SOURCE=$(shell echo $(SOURCE_URL) | awk -F '/' '{print $$NF}' | awk -F '.' '{print $$1}')
PATCH=0001-port-to-loong64.patch

default: image


image: download
	docker build -t cr.loongnix.cn/protainer/base:latest -f base.Dockerfile .
	docker build \
                --build-arg http_proxy=$(http_proxy) \
                --build-arg https_proxy=$(https_proxy) \
                -t $(IMAGE) -f src/portainer/build/linux/Dockerfile \
                .


src/$(SOURCE):
	git clone -q -b $(TAG) --depth=1 $(SOURCE_URL) $@
	cd $@ && \
		git apply ../../$(PATCH) && make tidy && bash build/build_binary.sh linux loong64

download: src/$(SOURCE)
	mkdir -p dist && cd dist && \
	http_proxy="" wget http://cloud.loongnix.cn/releases/loongarch64abi1/docker/compose/2.26.1/docker-compose && \
	cp $(DOCKER) ./ && \
	http_proxy="" wget -O kubectl http://cloud.loongnix.cn/releases/loongarch64abi1/k8s/v1.19.0/kubectl && \
	http_proxy="" wget http://cloud.loongnix.cn/releases/loongarch64abi1/helm/v3.4.5/helm && \
	cp ../src/portainer/dist/portainer ./ && \
	cp -r ../src/portainer/dist/mustache-templates ./ && \
	chmod +x ./* && \
	wget https://github.com/Loongson-Cloud-Community/portainer/releases/download/2.20.0/portainer-fronted.tar.gz  && tar xf portainer-fronted.tar.gz && rm portainer-fronted.tar.gz && \
	cd ../ && mkdir build && cd build && cp -r ../src/portainer/build/docker-extension ./

push:
	docker push cr.loongnix.cn/protainer/base:latest
	docker push $(IMAGE)
	@if [ $(LATEST) = "true" ]; \
		then\
		docker tag $(IMAGE) $(LATEST_IMAGE); \
		docker push $(LATEST_IMAGE); \
	fi

clean:
	rm -rf src dist build
