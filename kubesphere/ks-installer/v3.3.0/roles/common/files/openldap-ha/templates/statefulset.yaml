apiVersion: v1
kind: Service
metadata:
  name: {{ include "openldap-ha.fullname" . }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ include "openldap-ha.name" . }}
spec:
  clusterIP: None
  ports:
  - name: ldap
    port: 389
  selector:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ include "openldap-ha.name" . }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "openldap-ha.fullname" . }}
  labels:
{{ include "openldap-ha.labels" . | indent 4 }}
spec:
  serviceName: {{ include "openldap-ha.fullname" . }}
  {{- if .Values.ldap.replication }}
  replicas: 2
  {{- else }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "openldap-ha.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "openldap-ha.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | indent 8 }}
    {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
          - --copy-service
          - --loglevel=warning
          env:
          - name: LDAP_ORGANISATION
            value: "{{ .Values.ldap.organisation }}"
          - name: LDAP_DOMAIN
            value: "{{ .Values.ldap.domain }}"
          - name: LDAP_CONFIG_PASSWORD
            value: "{{ .Values.ldap.adminPassword }}"
          - name: LDAP_ADMIN_PASSWORD
            value: "{{ .Values.ldap.adminPassword }}"
          - name: LDAP_REPLICATION
            value: "{{ .Values.ldap.replication }}"
          - name: LDAP_TLS
            value: "false"
          - name: LDAP_REMOVE_CONFIG_AFTER_SETUP
            value: "true"
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: HOSTNAME
            value: "$(MY_POD_NAME).{{ include "openldap-ha.fullname" . }}"
          {{- if .Values.ldap.replication }}
          - name: LDAP_REPLICATION_CONFIG_SYNCPROV
            value: "binddn=\"cn=admin,cn=config\" bindmethod=simple credentials=$LDAP_CONFIG_PASSWORD searchbase=\"cn=config\" type=refreshAndPersist retry=\"60 +\" timeout=1"
          - name: LDAP_REPLICATION_DB_SYNCPROV
            value: "binddn=\"cn=admin,$LDAP_BASE_DN\" bindmethod=simple credentials=$LDAP_ADMIN_PASSWORD searchbase=\"$LDAP_BASE_DN\" type=refreshAndPersist interval=01:00:00:10 retry=\"60 +\" timeout=1"
          - name: LDAP_REPLICATION_HOSTS
            value: "#PYTHON2BASH:['ldap://{{ include "openldap-ha.fullname" . }}-0.{{ include "openldap-ha.fullname" . }}', 'ldap://{{ include "openldap-ha.fullname" . }}-1.{{ include "openldap-ha.fullname" . }}']"
          {{- end }}
          ports:
            - name: ldap
              containerPort: 389
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - mountPath: /var/lib/ldap
            name: openldap-pvc
            subPath: ldap-data
          - mountPath: /etc/ldap/slapd.d
            name: openldap-pvc
            subPath: ldap-config
          - mountPath: /container/service/slapd/assets/config/bootstrap/ldif/custom
            name: openldap-bootstrap
          readinessProbe:
            tcpSocket:
              port: 389
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 15
          livenessProbe:
            tcpSocket:
              port: 389
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 15
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: CriticalAddonsOnly
          operator: Exists
      volumes:
      - name: openldap-pvc
        persistentVolumeClaim:
          claimName: openldap-pvc
      - configMap:
          name: openldap-bootstrap
        name: openldap-bootstrap
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ include "openldap-ha.name" . }}
                  app.kubernetes.io/instance: {{ .Release.Name }}
              topologyKey: kubernetes.io/hostname
{{- with .Values.nodeAffinity }}
        nodeAffinity:
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: openldap-pvc
    spec:
      accessModes: ["ReadWriteOnce"]
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
    {{- end }}
    {{- end }}
      resources:
        requests:
          storage: "{{ .Values.persistence.size }}"
