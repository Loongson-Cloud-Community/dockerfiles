---

- name: ks-devops | Getting Jenkins config
  shell: >
    {{ bin_dir }}/kubectl get deploy -n kubesphere-devops-system ks-jenkins -o json | jq '.spec.template.spec.containers[0].env'
  register: envs
  failed_when: false

- name: ks-devops | Setting Jenkins configs (EMAIL_SMTP_HOST)
  set_fact:
    EMAIL_SMTP_HOST: "{{ item.value }}"
  when: item.name == 'EMAIL_SMTP_HOST'
  loop: "{{ envs.stdout }}"
  failed_when: false

- name: ks-devops | Setting Jenkins configs (EMAIL_FROM_ADDR)
  set_fact:
    EMAIL_FROM_ADDR: "{{ item.value }}"
  when: item.name == 'EMAIL_FROM_ADDR'
  loop: "{{ envs.stdout }}"
  failed_when: false

- name: ks-devops | Setting Jenkins configs (EMAIL_FROM_NAME)
  set_fact:
    EMAIL_FROM_NAME: "{{ item.value }}"
  when: item.name == 'EMAIL_FROM_NAME'
  loop: "{{ envs.stdout }}"
  failed_when: false

- name: ks-devops | Setting Jenkins configs (EMAIL_USE_SSL)
  set_fact:
    EMAIL_USE_SSL: "{{ item.value }}"
  when: item.name == 'EMAIL_USE_SSL'
  loop: "{{ envs.stdout }}"
  failed_when: false

- name: ks-devops | Setting Jenkins configs (EMAIL_SMTP_PORT)
  set_fact:
    EMAIL_SMTP_PORT: "{{ item.value }}"
  when: item.name == 'EMAIL_SMTP_PORT'
  loop: "{{ envs.stdout }}"
  failed_when: false

- name: ks-devops | Setting Jenkins configs (EMAIL_FROM_PASS)
  set_fact:
    EMAIL_FROM_PASS: "{{ item.value }}"
  when: item.name == 'EMAIL_FROM_PASS'
  loop: "{{ envs.stdout }}"
  failed_when: false

- name: ks-devops | Checking Jenkins PersistentVolumeClaim
  shell: >
    {{ bin_dir }}/kubectl get pvc -n kubesphere-devops-system ks-jenkins -o jsonpath='{.spec.resources.requests.storage}'
  register: jenkins_pvc
  failed_when: false

- name: ks-devops | Setting Jenkins pv size
  set_fact:
    jenkins_pv_size: "{{ jenkins_pvc.stdout }}"
  when:
    - jenkins_pvc.rc == 0
    - jenkins_pvc.stdout != ""
  failed_when: false