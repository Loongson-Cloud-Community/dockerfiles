apiVersion: auditing.kubesphere.io/v1alpha1
kind: Rule
metadata:
  name: archiving-rule
  labels:
    workspace: system-workspace
    type: archiving
spec:
  rules:
    - name: ignore-action
      type: list
      desc: all action not need to be audit
      list:
        - get
        - list
        - watch
    - name: archiving
      type: rule
      desc: All audit event except get, list, watch event
      condition: Verb not in ${ignore-action}
      enable: true
      priority: DEBUG

---
apiVersion: auditing.kubesphere.io/v1alpha1
kind: Rule
metadata:
  name: alerting-rule
  labels:
    workspace: system-workspace
    type: alerting
spec:
  rules:
    - name: action
      type: list
      desc: all operator need to be audit
      list:
        - create
        - delete
        - update
        - patch
    - name: pod
      type: macro
      desc: pod
      macro: ObjectRef.Resource="pods"
    - name: service
      type: macro
      desc: service
      macro: ObjectRef.Resource="services"
    - name: user
      type: alias
      desc: the alias of the user related to audit event
      alias: User.username
    - name: name
      type: alias
      desc: the alias of the resource name
      alias: ObjectRef.Name
    - name: namespace
      type: alias
      desc: the alias of the resource namespace
      alias: ObjectRef.Namespace
    - name: create
      type: macro
      desc: create operator
      macro: Verb = "create"
    - name: ResourceChange
      type: rule
      desc: audit the change of resource
      condition: Verb in ${action}
      enable: true
      priority: INFO
    - name: CreateHostnetworkPod
      type: rule
      desc: Detect an attempt to start a pod using the host network
      condition: ${pod} and ${create} and RequestObject.spec.hostNetwork = true
      enable: true
      output: ${user} ${Verb} HostNetwork Pod ${name} in Namespace ${namespace}.
      priority: WARNING
    - name: CreateHostportPod
      type: rule
      desc: Detect an attempt to start a pod mount to a host port
      condition: ${pod} and ${create} and (RequestObject.spec.containers[*].ports[*].hostPort > 0 or RequestObject.spec.initContainers[*].ports[*].hostPort > 0)
      enable: true
      output: ${user} ${Verb} HostNetPort Pod ${name} in Namespace ${namespace}.
      priority: WARNING
    - name: CreateNodeportService
      type: rule
      desc: Detect an attempt to start a service with a NodePort service type
      condition: ${service} and ${create} and RequestObject.spec.ports[*].nodePort > 0
      enable: true
      output: ${user} ${Verb} NodePort Service ${name} in Namespace ${namespace}.
      priority: WARNING
    - name: AttachOrExecPod
      type: rule
      desc: Detect any attempt to attach/exec to a pod
      condition: ${pod} and ${create} and ObjectRef.Subresource in ("exec", "attach")
      enable: true
      output: ${user} ${ObjectRef.Subresource} Pod ${name} in Namespace ${namespace}.
      priority: WARNING
