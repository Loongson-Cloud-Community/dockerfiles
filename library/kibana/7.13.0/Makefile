# This file is generated by the template.

REGISTRY?=cr.loongnix.cn
ORGANIZATION?=library
REPOSITORY?=kibana
TAG?=7.13.0

IMAGE=$(REGISTRY)/$(ORGANIZATION)/$(REPOSITORY):$(TAG)

KIBANA_VERSION?=7.13.0
KIBANA_REPOSITORY?=https://github.com/elastic/dockerfiles.git
KIBANA_TAR?=https://github.com/Loongson-Cloud-Community/kibana/releases/download/v7.13.0/kibana-7.13.0-linux-loongarch64.tar.gz

FONT_ADDR?=https://github.com/googlefonts/noto-cjk/raw/NotoSansV2.001/NotoSansCJK-Regular.ttc

TINI_ADDR?=https://github.com/Loongson-Cloud-Community/tini/releases/download/v0.19.0/tini-static

default: image


download: 
	if [ ! -e kibana.tar.gz ]; then \
		wget -O kibana.tar.gz "$(KIBANA_TAR)"; \
	fi 
	if [ ! -d bin ]; then \
		if [ ! -d dockerfiles ]; then \
			git clone --branch v$(KIBANA_VERSION) --depth=1 $(KIBANA_REPOSITORY); \
		fi ;\
		mv dockerfiles/kibana/bin .; \
	fi
	if [ ! -d config ]; then \
		mv dockerfiles/kibana/config .; \
	fi
	rm -rf dockerfiles
	if [ ! -e NotoSansCJK-Regular.ttc ]; then \
		curl -L -o NotoSansCJK-Regular.ttc $(FONT_ADDR); \
	fi
	if [ ! -e tini-static ]; then \
		wget -O tini-static "$(TINI_ADDR)"; \
	fi	


image: download
	docker build \
		-t $(IMAGE) \
		.

push:
	docker push $(IMAGE)

clean:
	@if [ -d bin ]; then \
		rm -rf bin; \
	fi
	@if [ -d config ]; then \
		rm -rf config; \
	fi
	@if [ -e kibana.tar.gz ]; then \
		rm -rf kibana.tar.gz; \
	fi
	@if [ -e NotoSansCJK-Regular.ttc ]; then \
		rm -rf NotoSansCJK-Regular.ttc; \
	fi
	@if [ -e tini-static ]; then \
		rm -rf tini-static; \
	fi
